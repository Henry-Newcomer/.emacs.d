
# ============================================================================
# ****************************************************************************
#+TITLE: Emacs Settings
#+AUTHOR: Henry Newcomer
# ****************************************************************************
# ============================================================================

* Startup
** Init
Drastically increase the garbage collection until the end of
this file, and then reset it
Source: https://www.reddit.com/r/emacs/comments/3kqt6e/2_easy_little_known_steps_to_speed_up_emacs_start/

#+BEGIN_SRC emacs-lisp
(setq-default gc-cons-threshold 100000000)
#+END_SRC

** Repositories
*** Repository sources
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
#+END_SRC

*** Required (before package customizations)
#+BEGIN_SRC emacs-lisp
(package-initialize)
#+END_SRC


* Package Settings
** LIST OF PACKAGES

    #+BEGIN_SRC emacs-lisp
    (defvar my-packages

    '(ace-window
      auto-complete
      dashboard
      doom-themes
      evil
      evil-surround
      evil-magit
      ;;fly-check
      helm
      highlight-indent-guides
      magit
      multiple-cursors
      ;;neotree
      org-bullets
      projectile
      rainbow-delimiters
      telephone-line
      undo-tree)

    "A list of packages to install if not locally found.")

    (defun my-packages-installed-p ()
    (cl-loop for p in my-packages
            when (not (package-installed-p p)) do (cl-return nil)
            finally (cl-return t)))
    (unless (my-packages-installed-p)
    ;; Check for new packages (package versions)
    (package-refresh-contents)
    ;; Install the missing packages
    (dolist (p my-packages)
        (when (not (package-installed-p p))
        (package-install p))))
    #+END_SRC



** TODO Ace Window
   Repo: https://github.com/abo-abo/ace-window
   TODO: Change keybinding for command, customize extra settings
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-o") 'ace-window)
#+END_SRC

** Auto-Complete
   Repo: https://github.com/auto-complete/auto-complete
#+BEGIN_SRC emacs-lisp
(ac-config-default)

(ac-set-trigger-key "TAB")
(setq ac-auto-start nil)
#+END_SRC

** Dashboard
   Repo: https://github.com/rakanalh/emacs-dashboard
#+BEGIN_SRC emacs-lisp
(require 'dashboard)
(dashboard-setup-startup-hook)

(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))

;; Set the title
(setq dashboard-banner-logo-title "Emacs Dashboard")
;; Set the banner
(setq dashboard-startup-banner 'logo)
;; Value can be
;; 'official which displays the official emacs logo
;; 'logo which displays an alternative emacs logo
;; 1, 2 or 3 which displays one of the text banners
;; "path/to/your/image.png" which displays whatever image you would prefer

(setq dashboard-items '((recents  . 10)
                        (bookmarks . 5)))
;;                        (projects . 5)
;;                        (agenda . 5)
;;                        (registers . 5)))
#+END_SRC

** Doom Themes
   Repo: https://github.com/hlissner/emacs-doom-themes#install

#+BEGIN_SRC emacs-lisp
(require 'doom-themes)

;; Global settings (defaults)
(setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
      doom-themes-enable-italic t) ; if nil, italics is universally disabled

;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each theme
;; may have their own settings.
(load-theme 'doom-one t)

;; Enable flashing mode-line on errors
(doom-themes-visual-bell-config)

;; Corrects (and improves) org-mode's native fontification.
(doom-themes-org-config)
#+END_SRC

** Evil mode

#+BEGIN_SRC emacs-lisp
(setq evil-want-C-u-scroll t)
(require 'evil)
(evil-mode 1)
#+END_SRC

** TODO Evil Surround
   Repo: https://github.com/emacs-evil/evil-surround

#+BEGIN_SRC emacs-lisp
#+END_SRC

** TODO Flycheck
   Repo: https://github.com/flycheck/flycheck

#+BEGIN_SRC emacs-lisp
#+END_SRC

** Helm
   Repo: https://github.com/emacs-helm/helm

#+BEGIN_SRC emacs-lisp
#+END_SRC

** Highlight Indent Guides

    Repo: https://github.com/DarthFennec/highlight-indent-guides
    #+BEGIN_SRC emacs-lisp
    (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
    (setq highlight-indent-guides-method 'character)
    #+END_SRC

** Magit

    #+BEGIN_SRC emacs-lisp
    (define-key evil-normal-state-map (kbd "SPC g") 'magit-status)
    (define-key evil-normal-state-map (kbd "SPC S-g") 'magit-dispatch-popup)
    #+END_SRC

** TODO Multiple Cursors
   Repo: https://github.com/magnars/multiple-cursors.el

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)

;;(global-set-key (kbd "C->") 'mc/mark-next-like-this)
;;(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
;;(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+END_SRC

** Neotree

#+BEGIN_SRC emacs-lisp
;;(require 'neotree)
;;(define-key evil-normal-state-map (kbd "SPC o") 'neotree-toggle)
;;(setq neo-theme (if (display-graphic-p) 'icons 'arrow))
#+END_SRC

** Improved/custom Org mode bullets

Only customize the bullet symbols when on a Linux distro
#+BEGIN_SRC emacs-lisp
(cond
  ((string-equal system-type "gnu/linux")
    ;;(require 'org-bullets)
    (setq org-bullets-bullet-list
        '("◉" "◎"))
    :config
        (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))))
#+END_SRC

Attempt to improve org-mode performance
#+BEGIN_SRC emacs-lisp
;; Source: https://www.reddit.com/r/emacs/comments/98flwy/does_anyone_know_a_good_alternative_to_orgbullets/
(setq inhibit-compacting-font-caches t)
#+END_SRC

** TODO Projectile

#+BEGIN_SRC emacs-lisp
(projectile-mode +1)
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+END_SRC

** TODO PHP mode

#+BEGIN_SRC emacs-lisp
;;(add-to-list 'load-path "~/.emacs.d/from_backup/php-mode")
;;(require 'php-mode)
#+END_SRC

** Rainbow Delimiters

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+END_SRC

** Telephone-line

   Repo: https://github.com/dbordak/telephone-line
#+BEGIN_SRC emacs-lisp
(setq telephone-line-primary-left-separator 'telephone-line-cubed-left
      telephone-line-secondary-left-separator 'telephone-line-cubed-hollow-left
      telephone-line-primary-right-separator 'telephone-line-cubed-right
      telephone-line-secondary-right-separator 'telephone-line-cubed-hollow-right)
(setq telephone-line-height 16)
(telephone-line-mode 1)
#+END_SRC

** TODO Undo Tree
** TODO Wrap region (not used)

#+BEGIN_SRC emacs-lisp
;; (add-to-list 'load-path "~/.emacs.d/from_backup/wrap-region.el")
;; (require 'wrap-region)
#+END_SRC


#+BEGIN_SRC emacs-lisp
;;(add-to-list 'load-path "~/.emacs.d/from_backup/undo-tree")
(global-undo-tree-mode)
#+END_SRC


* General emacs settings
** Automatic backups

#+BEGIN_SRC emacs-lisp
;;; Source; https://www.emacswiki.org/emacs/ForceBackups
;; Default and per-save backups go here:
(setq backup-directory-alist '(("" . "~/.emacs.d/backup/per-save")))

(defun force-backup-of-buffer ()
;; Make a special "per session" backup at the first save of each
;; emacs session.
(when (not buffer-backed-up)
    ;; Override the default parameters for per-session backups.
    (let ((backup-directory-alist '(("" . "~/.emacs.d/backup/per-session")))
        (kept-new-versions 3))
    (backup-buffer)))
;; Make a "per save" backup on each save.  The first save results in
;; both a per-session and a per-save backup, to keep the numbering
;; of per-save backups consistent.
(let ((buffer-backed-up nil))
    (backup-buffer)))

(add-hook 'before-save-hook  'force-backup-of-buffer)
#+END_SRC

** Font settings

Set default language and encodings
#+BEGIN_SRC emacs-lisp
(setenv "LANG" "en_US.UTF-8")
(setenv "LC_ALL" "en_US.UTF-8")
(setenv "LC_CTYPE" "en_US")
(set-locale-environment "English")
(set-language-environment 'English)
(prefer-coding-system 'utf-8)
(set-buffer-file-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(set-file-name-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
#+END_SRC

** Dired Mode

    Auto-refresh dired on file change
    #+BEGIN_SRC emacs-lisp
    (add-hook 'dired-mode-hook 'auto-revert-mode)
    #+END_SRC

** Highlight current line

#+BEGIN_SRC emacs-lisp
(global-hl-line-mode +1)
#+END_SRC

** Ido

#+BEGIN_SRC emacs-lisp
;; Source: https://www.masteringemacs.org/article/introduction-to-ido-mode
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)
(setq ido-separator "\n")
(setq ido-use-filename-at-point 'guess)
(setq ido-create-new-buffer 'always)
(setq ido-file-extensions-order '(".org" ".cpp" ".h" ".php" ".html" ".css"))
#+END_SRC

** Parentheses, braces, & brackets pairs

#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
(setq show-paren-delay 0)

;;(require 'paren)
;;(set-face-background 'show-paren-match (face-background 'default))
;;(set-face-foreground 'show-paren-match "#def")
;;(set-face-attribute 'show-paren-match nil :weight 'extra-bold)
#+END_SRC

** Prompt for Y or N (not Yes or No)

    #+BEGIN_SRC emacs-lisp
    (defalias 'yes-or-no-p 'y-or-n-p)
    #+END_SRC

** TODO Enable recent mode

#+BEGIN_SRC emacs-lisp
(recentf-mode 1)
(setq recentf-max-menu-items 25)
(global-set-key "\C-x\ \C-r" 'recentf-open-files)
#+END_SRC

** TODO (set custom colors) Relative line numbers

#+BEGIN_SRC emacs-lisp
(setq-default display-line-numbers 'relative
              display-line-numbers-type 'visual
              display-line-numbers-current-absolute t
              display-line-numbers-width 4
              display-line-numbers-widen t)
(add-hook 'text-mode-hook #'display-line-numbers-mode)
(add-hook 'prog-mode-hook #'display-line-numbers-mode)

;; Customize current line
;;(custom-set-faces '(line-number-current-line ((t :weight bold
;;                                                 :foreground "goldenrod"
;;                                                 :background "slate gray"))))
#+END_SRC

** Startup

    #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-message t)
    (setq initial-scratch-message nil)
    #+END_SRC

** <TAB>s

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
#+END_SRC

** Tweak Window UI

Disable the tool & menu bars
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
#+END_SRC

Disable the scroll bars
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
;; Hide the minibuffer window's scrollbar
(set-window-scroll-bars (minibuffer-window) nil nil)
#+END_SRC

Disable welcome screen
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
#+END_SRC

Open Emacs as fullscreen by default
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

** Web Browser (internal)

    Eww
    #+BEGIN_SRC emacs-lisp
    (setq browse-url-browser-function 'eww-browse-url)
    #+END_SRC

** Whitespace/80-column limit

#+BEGIN_SRC emacs-lisp
;;(require 'whitespace)
(setq whitespace-style '(face tabs lines-tail trailing))
(global-whitespace-mode t)
#+END_SRC


* Keybindings
** Removes default binding(s)

The Spacebar will act as a Leader key for my custom keybindings

#+BEGIN_SRC emacs-lisp
(define-key evil-normal-state-map (kbd "SPC") nil)
;;(define-key evil-insert-state-map (kbd "SPC") (kbd "SPC"))
;;(global-set-key (kbd "SPC") nil)
#+END_SRC


** Buffers

    #+BEGIN_SRC emacs-lisp
    (define-key evil-normal-state-map (kbd "SPC b") 'buffer-menu)
    (define-key evil-normal-state-map (kbd "SPC c b") 'kill-buffer)
    #+END_SRC

** TODO Comment/uncomment

TODO Verify how well this works
TODO Switch to NERD-Commenter

#+BEGIN_SRC emacs-lisp
;; Source: https://stackoverflow.com/questions/9688748/emacs-comment-uncomment-current-line
(defun toggle-comment-on-line ()
  "Comment or uncomment the current line"
  (interactive)
  (comment-or-uncomment-region (line-beginning-position) (line-end-position)))
(define-key evil-normal-state-map (kbd "SPC /") 'toggle-comment-on-line)
(define-key evil-visual-state-map (kbd "SPC /") 'toggle-comment-on-line)
#+END_SRC

** Double space (Normal Mode)

#+BEGIN_SRC emacs-lisp
(define-key evil-normal-state-map (kbd "SPC SPC") (kbd "i SPC ESC"))
#+END_SRC

** Edit Settings (shortcut)

TODO Check OS before trying to access settings file

#+BEGIN_SRC emacs-lisp
;; Think: Edit->Settings
(define-key evil-normal-state-map (kbd "SPC e s") (lambda() (interactive)(find-file "~/.emacs.d/settings.org")))
#+END_SRC

** File and folder management
*** Open Dired

#+BEGIN_SRC emacs-lisp
(define-key evil-normal-state-map (kbd "SPC o d") 'dired)
#+END_SRC

*** Open File

#+BEGIN_SRC emacs-lisp
(define-key evil-normal-state-map (kbd "SPC o f") 'dired)
#+END_SRC

*** Open recent files

#+BEGIN_SRC emacs-lisp
(define-key evil-normal-state-map (kbd "SPC o r") 'recentf-open-files)
#+END_SRC

** Jump to beginning/end of line

#+BEGIN_SRC emacs-lisp
;; Think: Move->First/Last
(define-key evil-normal-state-map (kbd "SPC m f") (kbd "^"))
(define-key evil-normal-state-map (kbd "SPC m l") (kbd "$"))
#+END_SRC

** Open terminal

TODO Default terminal based on OS

#+BEGIN_SRC emacs-lisp
;; Think: New->Terminal
(define-key evil-normal-state-map (kbd "SPC n t") 'term)
#+END_SRC

** Save

#+BEGIN_SRC emacs-lisp
(define-key evil-normal-state-map (kbd "SPC w") 'save-buffer)
(define-key evil-normal-state-map (kbd "SPC S-w") 'write-file)
#+END_SRC

** Text Scaling

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C-=") 'text-scale-decrease)
#+END_SRC

** TODO Whitespace/80-column limit (toggle)

#+BEGIN_SRC emacs-lisp
  (defun henry-custom-toggle-column-limit ()
    (interactive)
    (if (get 'henry-custom-toggle-column-limit 'state)
      (progn
        (message "set to nil")
        (setq global-whitespace-style -1)
        (put 'henry-custom-toggle-column-limit 'state nil))
      (progn
        (message "set to t")
;;      (setq whitespace-style '(face tabs lines-tail trailing))
        (setq global-whitespace-style t)
        (put 'henry-custom-toggle-column-limit 'state t))))

  (define-key evil-normal-state-map (kbd "SPC \\") 'henry-custom-toggle-column-limit)
  ;; (define-key evil-normal-state-map (kbd "SPC q") 'save-buffers-kill-emacs)
  ;; (define-key evil-normal-state-map (kbd "SPC q") 'save-buffers-kill-emacs)
  ;; (setq whitespace-style '(face tabs lines-tail trailing))
  ;; (setq whitespace-style '(face tabs lines-tail trailing))
#+END_SRC

** Window management

#+BEGIN_SRC emacs-lisp
;; Think: Split->Horizontal or Vertical
(define-key evil-normal-state-map (kbd "SPC s h") 'split-window-below)
(define-key evil-normal-state-map (kbd "SPC s v") 'split-window-right)

;; Move across split windows
(define-key evil-normal-state-map (kbd "SPC h") 'windmove-left)
(define-key evil-normal-state-map (kbd "SPC l") 'windmove-right)
(define-key evil-normal-state-map (kbd "SPC k") 'windmove-up)
(define-key evil-normal-state-map (kbd "SPC j") 'windmove-down)

;; Resize window panes
(define-key evil-normal-state-map (kbd "<C-M-up>") 'shrink-window)
(define-key evil-normal-state-map (kbd "<C-M-down>") 'enlarge-window)
(define-key evil-normal-state-map (kbd "<C-M-left>") 'shrink-window-horizontally)
(define-key evil-normal-state-map (kbd "<C-M-right>") 'enlarge-window-horizontally)

;; Close active window
(define-key evil-normal-state-map (kbd "SPC c w") 'delete-window)

(define-key evil-normal-state-map (kbd "SPC S-j") #'other-window)
(define-key evil-normal-state-map (kbd "SPC S-k") #'prev-window)
(defun prev-window ()
  (interactive)
  (other-window -1))
#+END_SRC


* Closure
#+BEGIN_SRC emacs-lisp
(run-with-idle-timer 5 nil (lambda ()
  (setq-default gc-cons-threshold 1000000)
  (message "gc-cons-threshold restored to %s" gc-cons-threshold)))

(run-with-idle-timer 7 nil (lambda ()
  (message "Finished loading emacs settings.")))
#+END_SRC
