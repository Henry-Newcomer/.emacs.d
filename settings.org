
# ============================================================================
# ****************************************************************************
#+TITLE: Emacs Settings
#+AUTHOR: Henry Newcomer
# ****************************************************************************
# ============================================================================

* #TODOs
** Keybindings
*** TODO Set toggle for tab's space count, OR make keybinding for tab=2 and for tab=4
*** TODO Make sexp keybinding for normal and visual [SPC e]; Auto jump to end of line (or last closing parenthesis?)
*** TODO Change keybinding for jumping to a mark - default: ` (backtick)
*** TODO Jump to last buffer
*** TODO Open last file


* Startup
** Init
*** Garbage Collection
    Drastically increase the garbage collection until the end of
    this file. Afterwards, lower it back down.

    Source: https://www.reddit.com/r/emacs/comments/3kqt6e/2_easy_little_known_steps_to_speed_up_emacs_start/

    #+BEGIN_SRC emacs-lisp
    (setq-default gc-cons-threshold 100000000)
    #+END_SRC

*** Operating System
    Detects the current Operating System
    #+BEGIN_SRC emacs-lisp
    (defun henry:detect-os ()
    "Detects the current system's Operating System."

      (setq henry:current-os-detected nil)

      (cond
        ((string-equal system-type "gnu/linux")
          (setq henry:current-os "Linux")
          (setq henry:current-os-detected t))
        ((string-equal system-type "windows-nt")
          (setq henry:current-os "Windows")
          (setq henry:current-os-detected t))
        ((string-equal system-type "darwin")
          (setq henry:current-os "OSX")
          (setq henry:current-os-detected t)))

    (if henry:current-os-detected
        (progn
          (message (concat "Current OS detected: " henry:current-os)))
        (progn
          (message "Warning! OS detection failed!"))))

    ;; Initiates the function
    (henry:detect-os)
    #+END_SRC

*** <Leader> key

    #+BEGIN_SRC emacs-lisp
    (defvar <Leader> (make-sparse-keymap)
      "Keymap for custom \"<Leader>\" keybindings.")
    #+END_SRC

** Repository sources
    #+BEGIN_SRC emacs-lisp
    (require 'package)
    (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
    #+END_SRC



* Package Settings
** :: LIST OF PACKAGES ::
    #+BEGIN_SRC emacs-lisp
    (defvar my-packages

      '(ace-window
        aggressive-indent
        beacon
        clang-format
        cmake-font-lock
        column-enforce-mode
        company
        counsel-etags
        dashboard
        dimmer
        doom-themes
        dumb-jump
        emmet-mode
        evil
        evil-magit
        evil-nerd-commenter
        evil-surround
        flycheck
        git-gutter
        google-this
        highlight-indent-guides
;;      highlight-thing
        ivy
;;      lispy
        magit
        mmm-mode
        modern-cpp-font-lock
        multiple-cursors
        org-bullets
        page-break-lines
        rainbow-delimiters
        realgud
        telephone-line
        undo-tree)
;;      visual-regexp
;;      yasnippet

    "A list of packages to install if not locally found.")
    #+END_SRC

*** Required (before package customizations)
    #+BEGIN_SRC emacs-lisp
    (package-initialize)
    #+END_SRC


*** Check for package installations & upgrades

    #+BEGIN_SRC emacs-lisp
    (defun my-packages-installed-p ()
      (cl-loop for p in my-packages
              when (not (package-installed-p p)) do (cl-return nil)
              finally (cl-return t)))
      (unless (my-packages-installed-p)
      ;; Check for new packages (package versions)
      (package-refresh-contents)
      ;; Install the missing packages
      (dolist (p my-packages)
          (when (not (package-installed-p p))
          (package-install p))))
    #+END_SRC





** Initialize Evil Mode

    #+BEGIN_SRC emacs-lisp
    (setq evil-want-C-u-scroll t)
    (require 'evil)
    (evil-mode 1)

;;    (define-key evil-normal-state-map (kbd "SPC") 'nil)
    (define-key evil-normal-state-map (kbd "SPC") <Leader>)

    ;;(define-key <Leader> (kbd "h") 'test)
    #+END_SRC


** TODO Ace Window
    Repo: https://github.com/abo-abo/ace-window

    TODO: Change keybinding for command, customize extra settings

    #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "M-o") 'ace-window)
    #+END_SRC

** Aggressive Indent Mode
    Repo: https://github.com/Malabarba/aggressive-indent-mode

    #+BEGIN_SRC emacs-lisp
    (global-aggressive-indent-mode 1)
    ;; TODO: Determine if I prefer HTML mode to
    ;; use Aggressive Indent Mode or not
    (add-to-list 'aggressive-indent-excluded-modes 'html-mode)

    ;; Prevents akward alignment blinkings within C++ Mode
     (add-to-list
      'aggressive-indent-dont-indent-if
      '(and (derived-mode-p 'c++-mode)
            (null (string-match "\\([;{}]\\|\\b\\(if\\|for\\|while\\)\\b\\)"
                                (thing-at-point 'line)))))
    #+END_SRC

** Beacon
    Repo: https://github.com/Malabarba/beacon

    #+BEGIN_SRC emacs-lisp
    (beacon-mode 1)
    #+END_SRC

** Clang Format
    Repo: https://clang.llvm.org/docs/ClangFormat.html

    #+BEGIN_SRC emacs-lisp
    (define-key <Leader> (kbd "c f") 'clang-format-region)
    #+END_SRC

** Cmake Font Lock
    Repo: https://github.com/Lindydancer/cmake-font-lock

    #+BEGIN_SRC emacs-lisp
    (autoload 'cmake-font-lock-activate "cmake-font-lock" nil t)
    (add-hook 'cmake-mode-hook 'cmake-font-lock-activate)
    #+END_SRC

** Counsel eTags
    Repo: https://github.com/redguardtoo/counsel-etags

    Settings based off of: https://gist.github.com/nilsdeppe/7645c096d93b005458d97d6874a91ea9

    #+BEGIN_SRC emacs-lisp
    (define-key evil-normal-state-map (kbd "M-.") 'counsel-etags-find-tag-at-point)
    (define-key evil-normal-state-map (kbd "M-*") 'counsel-etags-grep-symbol-at-point)
    (define-key evil-normal-state-map (kbd "M-f") 'counsel-etags-find-tag)

    ;; Ignore files above 1Mb
    (setq counsel-etags-max-file-size 1024)

    ;; Ignore build directories
    (eval-after-load 'counsel-etags
      '(progn
        ;; counsel-etags-ignore-directories does NOT support wildcast
        (add-to-list 'counsel-etags-ignore-directories "build")
        (add-to-list 'counsel-etags-ignore-directories ".vscode")
        ;; counsel-etags-ignore-filenames DOES support wildcast
        (add-to-list 'counsel-etags-ignore-filenames "TAGS")
        (add-to-list 'counsel-etags-ignore-filenames "*.clang-format")))

    ;; Don't ask before re-reading the TAGS files if they have changed
    (setq tags-revert-without-query t)

    ;; Don't warn when TAGS files are large
    ;;(setq large-file-warning-threshold nil)

    ;; How many seconds to wait before rerunning tags for auto-update
    (setq counsel-etags-update-interval 180)

    ;; Set up auto-update
    (add-hook 'prog-mode-hook
        (lambda () (add-hook 'after-save-hook
            (lambda ()
                (counsel-etags-virtual-update-tags)))))
    #+END_SRC

** TODO Company Mode
    Repo: http://company-mode.github.io/

    TODO: Decide whether to use a keybinding or the delay...

    #+BEGIN_SRC emacs-lisp
    (add-hook 'after-init-hook 'global-company-mode)
    ;; Set keybindings
    (define-key evil-normal-state-map (kbd "<C-tab>") 'company-complete)
    (define-key evil-insert-state-map (kbd "<C-tab>") 'company-complete)

    ;; Show results immediately
;;    (setq company-idle-delay 0)
    #+END_SRC

** Dashboard
    Repo: https://github.com/rakanalh/emacs-dashboard

    #+BEGIN_SRC emacs-lisp
    (dashboard-setup-startup-hook)

    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))

    ;; Set the title
    ;;  - Time and gc info from:
    ;; https://www.reddit.com/r/emacs/comments/8jaflq/tip_how_to_use_your_dashboard_properly/
    (setq dashboard-banner-logo-title
      (format "Emacs Dashboard: %.2f seconds to load & %d garbage collections."
        (float-time (time-subtract after-init-time before-init-time)) gcs-done))

    ;; Set the banner
    (setq dashboard-startup-banner 'logo)
    ;; Value can be
    ;; 'official which displays the official emacs logo
    ;; 'logo which displays an alternative emacs logo
    ;; 1, 2 or 3 which displays one of the text banners
    ;; "path/to/your/image.png" which displays whatever image you would prefer

    (setq dashboard-items '((recents  . 10)
                            (bookmarks . 5)
                            (projects . 5)))
    ;;                        (agenda . 5)
    ;;                        (registers . 5)))
    #+END_SRC

** Dimmer
    Repo: https://github.com/gonewest818/dimmer.el

    #+BEGIN_SRC emacs-lisp
    (dimmer-mode)
    #+END_SRC

** Doom Themes
    Repo: https://github.com/hlissner/emacs-doom-themes#install

    #+BEGIN_SRC emacs-lisp
    (require 'doom-themes)

    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled

    ;; Load the specific theme
    (load-theme 'doom-city-lights t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)

    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config)
    #+END_SRC

** Dumb Jump
    Repo: https://github.com/jacktasia/dumb-jump

    #+BEGIN_SRC emacs-lisp
    (dumb-jump-mode)
    (define-key <Leader> (kbd "* f") 'dumb-jump-go)
    (define-key <Leader> (kbd "* F") 'dumb-jump-back)
    #+END_SRC

** Emmet Mode
    Repo: https://github.com/smihica/emmet-mode

    #+BEGIN_SRC emacs-lisp
    ;;(add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
    ;;(add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
    #+END_SRC

** Evil

    #+BEGIN_SRC emacs-lisp
    ;; Change to Evil's Normal Mode regardless of current state
    (global-set-key (kbd "<C-escape>") 'evil-normal-state)
    #+END_SRC

** Evil Nerd Commenter
   Repo: https://github.com/redguardtoo/evil-nerd-commenter

    #+BEGIN_SRC emacs-lisp
    ;;evilnc-default-hotkeys)

    (define-key <Leader> (kbd "/ /") 'evilnc-comment-or-uncomment-lines)
    (define-key <Leader> (kbd "/ l") 'evilnc-quick-comment-or-uncomment-to-the-line)
    (define-key <Leader> (kbd "/ y") 'evilnc-copy-and-comment-lines)
    (define-key <Leader> (kbd "/ p") 'evilnc-comment-or-uncomment-paragraphs)
    ;; TODO: This might need changed to use Visual Mode instead of Normal Mode
    (define-key evil-visual-state-map (kbd "SPC / r") 'comment-or-uncomment-region)

    ;; List of possible function calls:
    ;; --------------------------------
    ;; 'evilnc-comment-or-uncomment-lines
    ;; 'evilnc-quick-comment-or-uncomment-to-the-line
    ;; 'evilnc-copy-and-comment-lines
    ;; 'evilnc-comment-or-uncomment-paragraphs
    ;; 'comment-or-uncomment-region
    ;; 'evilnc-toggle-invert-comment-line-by-line
    ;; 'evilnc-copy-and-comment-operator
    ;; 'evilnc-comment-operator ; if you prefer backslash key
    #+END_SRC

** TODO Evil Surround
   Repo: https://github.com/emacs-evil/evil-surround

    #+BEGIN_SRC emacs-lisp
    #+END_SRC

** Flycheck
    Repo: https://github.com/flycheck/flycheck

    #+BEGIN_SRC emacs-lisp
    (add-hook 'after-init-hook #'global-flycheck-mode)
    #+END_SRC

** Git Gutter
    Repo: https://github.com/syohex/emacs-git-gutter

    #+BEGIN_SRC emacs-lisp
    (global-git-gutter-mode +1)
    #+END_SRC

** Google This
    Repo: https://github.com/Malabarba/emacs-google-this

    #+BEGIN_SRC emacs-lisp
    (google-this-mode 1)
    ;; Not sure what keybinding I want to use for these commands
    ;; Open->Google
    (define-key <Leader> (kbd "o g") 'google-this-mode-submap)
    ;;(define-key <Leader> (kbd "o g e") 'google-error)
    #+END_SRC

** TODO Highlight Indent (<TAB>) Guides
    Repo: https://github.com/DarthFennec/highlight-indent-guides

    #+BEGIN_SRC emacs-lisp
    (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
    (setq highlight-indent-guides-method 'column)
    #+END_SRC

** TODO Highlight Thing
    Repo: https://github.com/fgeller/highlight-thing.el

    TODO: Decide if I want to keep this or not.

    #+BEGIN_SRC emacs-lisp
    ;; (global-highlight-thing-mode)
    ;; Alternatively, use this to only enable during prog-mode
    ;;(add-hook 'prog-mode-hook 'highlight-thing-mode)

    ;; (setq highlight-thing-delay-seconds 1.5)

    ;; Customize the highlight
    ;; (set-face-background 'hi-yellow "#111111")
    #+END_SRC

** Improved Org Mode Bullet Symbols
    Only customize the bullet symbols when on a Linux distro

    #+BEGIN_SRC emacs-lisp
    (cond
      ((string-equal system-type "gnu/linux")
         ;;(require 'org-bullets)
         (setq org-bullets-bullet-list
             '("◉" "◎"))
         :config
             (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))))
    #+END_SRC

** Ivy / Swiper
    Repo: https://github.com/abo-abo/swiper

    #+BEGIN_SRC emacs-lisp
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)

    (define-key <Leader> (kbd "s s") 'swiper) ;; Swiper->Search
    (define-key <Leader> "f" 'project-find-file)

;; ~~~
;; Possible config additions:
;;    (global-set-key "\C-s" 'swiper)
;;    (global-set-key (kbd "C-c C-r") 'ivy-resume)
;;    (global-set-key (kbd "<f6>") 'ivy-resume)
;;    (global-set-key (kbd "M-x") 'counsel-M-x)
;;    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
;;    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
;;    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
;;    (global-set-key (kbd "<f1> l") 'counsel-find-library)
;;    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
;;    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
;;    (global-set-key (kbd "C-c g") 'counsel-git)
;;    (global-set-key (kbd "C-c j") 'counsel-git-grep)
;;    (global-set-key (kbd "C-c k") 'counsel-ag)
;;    (global-set-key (kbd "C-x l") 'counsel-locate)
;;    (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
;;    (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
    #+END_SRC

** TODO Lispy

    Repo: https://github.com/abo-abo/lispy

    #+BEGIN_SRC emacs-lisp
    ;;(add-hook 'emacs-lisp-mode-hook (lambda () (lispy-mode 1)))
    #+END_SRC

** Magit

    #+BEGIN_SRC emacs-lisp
    (setq evil-magit-state 'normal)
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
    (define-key <Leader> "g" 'magit-status)
    (define-key <Leader> "G" 'magit-dispatch-popup)
    #+END_SRC

** TODO MMM-Mode
    Repo: https://github.com/purcell/mmm-mode

    #+BEGIN_SRC emacs-lisp
    ;; FIXME: mmm-add-mode-ext-class is throwing an error; void definition
    ;;(setq mmm-global-mode 'maybe)
    ;;(mmm-add-mode-ext-class 'html-mode "\\.php\\'" 'html-php)

    ;; FIXME: Verify this is working as expected
    ;;(mmm-add-mode-ext-class 'org-mode "\\.org\\'" 'emacs-lisp-mode)
    #+END_SRC

** Modern C++ Font Lock
    Repo: https://github.com/ludwigpacifici/modern-cpp-font-lock

    #+BEGIN_SRC emacs-lisp
;;    (modern-c++-font-lock-global-mode t)
    (add-hook 'c++-mode-hook #'modern-c++-font-lock-mode)
    #+END_SRC

** TODO Multiple Cursors
   Repo: https://github.com/magnars/multiple-cursors.el

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)

;;(global-set-key (kbd "C->") 'mc/mark-next-like-this)
;;(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
;;(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+END_SRC

** Page Break Lines

    #+BEGIN_SRC emacs-lisp
    (global-page-break-lines-mode)
    #+END_SRC

** TODO Projectile

    #+BEGIN_SRC emacs-lisp
;;    (projectile-mode +1)
;;    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    #+END_SRC

** TODO PHP mode

#+BEGIN_SRC emacs-lisp
;;(add-to-list 'load-path "~/.emacs.d/from_backup/php-mode")
;;(require 'php-mode)
#+END_SRC

** Rainbow Delimiters

    #+BEGIN_SRC emacs-lisp
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
    #+END_SRC

** TODO Realgud
    Repo: https://github.com/realgud/realgud

    #+BEGIN_SRC emacs-lisp
    ;; Run->Debugger
    (define-key <Leader> (kbd "r d") 'realgud:gdb)
    #+END_SRC

** Telephone-line
    Repo: https://github.com/dbordak/telephone-line

    #+BEGIN_SRC emacs-lisp
    (setq telephone-line-primary-left-separator 'telephone-line-cubed-left
        telephone-line-secondary-left-separator 'telephone-line-cubed-hollow-left
        telephone-line-primary-right-separator 'telephone-line-cubed-right
        telephone-line-secondary-right-separator 'telephone-line-cubed-hollow-right)
    (setq telephone-line-height 16)
    (telephone-line-mode 1)
    #+END_SRC

** Undo Tree

    #+BEGIN_SRC emacs-lisp
    (global-undo-tree-mode 1)

    (define-key evil-normal-state-map (kbd "u") 'undo)
    (define-key evil-normal-state-map (kbd "C-r") 'undo-tree-redo)
    (define-key <Leader> (kbd "C-r") 'undo-tree-visualize)
    #+END_SRC

** TODO Yasnippet
    Source: https://github.com/joaotavora/yasnippet

    For a list of Snippets, check out:
    https://github.com/AndreaCrotti/yasnippet-snippets/tree/master/snippets

    #+BEGIN_SRC emacs-lisp
;;    (yas-global-mode 1)
    #+END_SRC


* General emacs settings
** Automatic backups
    Source: https://www.emacswiki.org/emacs/ForceBackups

    #+BEGIN_SRC emacs-lisp
    ;; Default and per-save backups go here:
    (setq backup-directory-alist '(("" . "~/.emacs.d/backups/per-save")))

    (defun force-backup-of-buffer ()
    ;; Make a special "per session" backup at the first save of each
    ;; emacs session.
    (when (not buffer-backed-up)
        ;; Override the default parameters for per-session backups.
        (let ((backup-directory-alist '(("" . "~/.emacs.d/backups/per-session")))
            (kept-new-versions 3))
        (backup-buffer)))
    ;; Make a "per save" backup on each save.  The first save results in
    ;; both a per-session and a per-save backup, to keep the numbering
    ;; of per-save backups consistent.
    (let ((buffer-backed-up nil))
        (backup-buffer)))

    (add-hook 'before-save-hook  'force-backup-of-buffer)
    #+END_SRC

** Build / Compile / Run

    // @@@@

    #+BEGIN_SRC emacs-lisp
    ;; By default, set these vars to nil
    (setq henry:custom-build-process:build-string nil) ;; CMake
    (setq henry:custom-build-process:compile-string nil) ;; Makefile
    (setq henry:custom-build-process:run-string nil)

    ;; Build (example: cmake)

    (defun henry:custom-build-process:setBuild (x)
      "Set a custom string of commands for running a build (uses local .dir-locals.el file).
       For example, cmake commands."
      (interactive "s")
      (setq henry:custom-build-process:build-string x))

    (defun henry:custom-build-process:build ()
      "Run a custom compile command based on local .dir-locals.el file.
        For example, this is used for cmake builds within C++ mode."
      (interactive)
      (message (concat "Building project:\nRunning command(s): " henry:custom-build-process:build-string))
      (message "\n")
      ;; TODO: add cond to check if build string == nil
      (async-shell-command henry:custom-build-process:build-string)
      ;; TODO: Hide window (and set to Normal (evil) Mode by default)
      (message "-----------------\n")
    )

    ;; Build->Build
    (define-key <Leader> (kbd "b b") 'henry:custom-build-process:build)

    ;; Compile (example: Makefile)

    (defun henry:custom-build-process:setCompile (x)
      "Set a custom string of commands for compiling (uses local .dir-locals.el file)."
      (interactive "s")
      (setq henry:custom-build-process:compile-string x))

    (defun henry:custom-build-process:compile ()
      "Run a custom compile command based on local .dir-locals.el file.
        For example, this is used for cmake builds within C++ mode."
      (interactive)
      (message (concat "Compiling project:\nRunning command(s): " henry:custom-build-process:compile-string))
      (message "\n")
      ;; TODO: add cond to check if build string == nil
      (async-shell-command henry:custom-build-process:compile-string)
      ;; TODO: Hide window (and set to Normal (evil) Mode by default)
      (message "-----------------\n")
    )

    ;; Build->Compile
    (define-key <Leader> (kbd "b c") 'henry:custom-build-process:compile)

    ;; Run program (example: ./a.exe)

    (defun henry:custom-build-process:setRun (x)
      "Set a custom string of commands for running an executable (uses local .dir-locals.el file)."
      (interactive "s")
      (setq henry:custom-build-process:run-string x))

    (defun henry:custom-build-process:run ()
      "Run a custom command to start an executable; based on local .dir-locals.el file."
      (interactive)
      (message (concat "Starting application:\nRunning command(s): " henry:custom-build-process:run-string))
      (message "\n")
      ;; TODO: add cond to check if build string == nil
      (async-shell-command henry:custom-build-process:run-string)
      ;; TODO: Hide window (and set to Normal (evil) Mode by default)
      (message "-----------------\n")
    )

    ;; Build->Run
    (define-key <Leader> (kbd "b r") 'henry:custom-build-process:run)
    #+END_SRC

    Example code to put within a project root's .dir-locals.el file:

((nil . ((eval . (progn
                   ;; Cmake
                   (henry:custom-build-process:setBuild
                     "cd ${PWD%%/src/*}/../build && cmake ..")
                   ;; Makefile
                   (henry:custom-build-process:setCompile
                     "cd ${PWD%%/src/*}/../build && make all")
                   ;; Run .exe
                   (henry:custom-build-process:setRun
                     "cd ${PWD%%/src/*}/../build && ./a.exe"))))))


** Cursor

    #+BEGIN_SRC emacs-lisp
    ;; TODO: Not working?
    ;;(set-default 'cursor-type 'bar)

    ;; Don't blink the cursor
    (blink-cursor-mode -1)
    #+END_SRC

** C++

    Makes header files (.h) use C++ Mode rather than C Mode.

    #+BEGIN_SRC emacs-lisp
    (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
    #+END_SRC

** Column Enforce Mode (80-char Toggle)

    #+BEGIN_SRC emacs-lisp
    ;; Run this package, but disable it by default
    (column-enforce-mode -1)

    (setq column-enforce-column 80)

    ;; Customize the font style
    (face-spec-set column-enforce-face '((t (:foreground "#ff2222" :bold t :underline t))))
    ;;(face-spec-set column-enforce-face '((t (:background "dark red"))))

    (defun henry:custom-toggle-column-limit ()
      "Toggles the column limit from 80 to unlimited"
      (interactive)
      (if (get 'henry:custom-toggle-column-limit 'state)
        (progn
          (message "80-column limit indicator DISABLED.")
          (column-enforce-mode -1)
          (put 'henry:custom-toggle-column-limit 'state nil))
        (progn
          (message "80-column limit indicator ENABLED.")
          (column-enforce-mode t)
          (put 'henry:custom-toggle-column-limit 'state t))))

    ;; Toggle->Limit
    (define-key <Leader> (kbd "t l") 'henry:custom-toggle-column-limit)
    #+END_SRC

** Dired Mode

    Auto-refresh dired on file change
    #+BEGIN_SRC emacs-lisp
    (add-hook 'dired-mode-hook 'auto-revert-mode)
    #+END_SRC

** Font settings
    Set default language and encodings

    #+BEGIN_SRC emacs-lisp
    (setenv "LANG" "en_US.UTF-8")
    (setenv "LC_ALL" "en_US.UTF-8")
    (setenv "LC_CTYPE" "en_US")
    (set-locale-environment "English")
    (set-language-environment 'English)
    (prefer-coding-system 'utf-8)
    (set-buffer-file-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)
    (set-selection-coding-system 'utf-8)
    (set-file-name-coding-system 'utf-8)
    (set-terminal-coding-system 'utf-8)
    #+END_SRC

** Highlights
*** Current Line

    #+BEGIN_SRC emacs-lisp
    (global-hl-line-mode +1)
    #+END_SRC

*** Keywords (ex. "TODO")
    Source: https://gist.github.com/nilsdeppe/7645c096d93b005458d97d6874a91ea9

    #+BEGIN_SRC emacs-lisp
    (add-hook 'prog-mode-hook
      (lambda ()
        ;; Disabled in cmake-mode due to glitch (see Author's comment in source)
        (when (not (derived-mode-p 'cmake-mode))
          (font-lock-add-keywords nil
            '(("\\<\\(BUG\\|DONE\\|FIXME\\|NOTE\\|TODO\\)"
                1 font-lock-warning-face t))))))
    #+END_SRC

** Ido

    #+BEGIN_SRC emacs-lisp
    ;; Source: https://www.masteringemacs.org/article/introduction-to-ido-mode
    (setq ido-enable-flex-matching t)
    (setq ido-everywhere t)
    (ido-mode 1)
    (setq ido-separator "\n")
    (setq ido-use-filename-at-point 'guess)
    (setq ido-create-new-buffer 'always)
    (setq ido-file-extensions-order '(".org" ".cpp" ".h" ".php" ".html" ".css"))
    #+END_SRC

** Org Mode
*** Customizes the colors
    Source: https://orgmode.org/manual/Faces-for-TODO-keywords.html

    #+BEGIN_SRC emacs-lisp
    (setq org-todo-keyword-faces
        '(("TODO" . "#3399ff") ("STARTED" . "yellow")
            ("CANCELED" . (:foreground "blue" :weight bold))))
    #+END_SRC

    Colorize key areas within Org Mode
    Source: https://zzamboni.org/post/beautifying-org-mode-in-emacs/

    TODO: Use more of source author's code:

    #+BEGIN_SRC emacs-lisp
    (custom-theme-set-faces
      'user
      '(org-document-info         ((t (:foreground "dark orange"))))
      '(org-link                  ((t (:foreground "royal blue" :underline t))))
      '(org-tag                   ((t (:weight bold height 0.8))))
      '(org-verbatim               ((t (:weight bold height 0.8)))))

    ;; Original settings from source:
    ;; -----------------------------
    ;; (custom-theme-set-faces
    ;;  'user
    ;;  '(org-block                 ((t (:inherit fixed-pitch))))
    ;;  '(org-document-info         ((t (:foreground "dark orange"))))
    ;;  '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
    ;;  '(org-link                  ((t (:foreground "royal blue" :underline t))))
    ;;  '(org-meta-line             ((t (:inherit (font-lock-comment-face fixed-pitch)))))
    ;;  '(org-property-value        ((t (:inherit fixed-pitch))) t)
    ;;  '(org-special-keyword       ((t (:inherit (font-lock-comment-face fixed-pitch)))))
    ;;  '(org-tag                   ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
    ;;  '(org-verbatim              ((t (:inherit (shadow fixed-pitch))))))
    #+END_SRC

*** Attempt to improve org-mode performance
    Source: https://www.reddit.com/r/emacs/comments/98flwy/does_anyone_know_a_good_alternative_to_orgbullets/

    #+BEGIN_SRC emacs-lisp
    (setq inhibit-compacting-font-caches t)
    #+END_SRC

** Paragraphs

    "Sentences" don't need to be followed by two spaces.

    #+BEGIN_SRC emacs-lisp
    (setq sentence-end-double-space 'nil)
    #+END_SRC

** Parentheses, braces, & brackets pairs

    #+BEGIN_SRC emacs-lisp
    (show-paren-mode 1)
    (setq show-paren-delay 0)

    ;;(require 'paren)
    ;;(set-face-background 'show-paren-match (face-background 'default))
    ;;(set-face-foreground 'show-paren-match "#def")
    ;;(set-face-attribute 'show-paren-match nil :weight 'extra-bold)
    #+END_SRC

** Prompt for Y or N (not Yes or No)

    #+BEGIN_SRC emacs-lisp
    (defalias 'yes-or-no-p 'y-or-n-p)
    #+END_SRC

** TODO Recent mode

    #+BEGIN_SRC emacs-lisp
    (recentf-mode 1)
    (setq recentf-max-menu-items 25)
    (global-set-key "\C-x\ \C-r" 'recentf-open-files)
    #+END_SRC

** TODO Relative line numbers (set custom colors)

    #+BEGIN_SRC emacs-lisp
    (setq-default display-line-numbers 'relative
                display-line-numbers-type 'visual
                display-line-numbers-current-absolute t
                display-line-numbers-width 4
                display-line-numbers-widen t)
    (add-hook 'text-mode-hook #'display-line-numbers-mode)
    (add-hook 'prog-mode-hook #'display-line-numbers-mode)

    ;; Customize current line
    ;;(custom-set-faces '(line-number-current-line ((t :weight bold
    ;;                                                 :foreground "goldenrod"
    ;;                                                 :background "slate gray"))))
    #+END_SRC

** Scrolling

    #+BEGIN_SRC emacs-lisp
    (setq scroll-step 1)
    (setq scroll-sconservatively 10000)
    (setq auto-window-vscroll nil)
    #+END_SRC

** Sound

    Disable the alert bell sound effect
    #+BEGIN_SRC emacs-lisp
    (setq ring-bell-function 'ignore)
    #+END_SRC

** Startup

    #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-message t)
    (setq initial-scratch-message nil)
    #+END_SRC

** TODO <TAB>s / indentation

    General default attributes

    #+BEGIN_SRC emacs-lisp
    ;; Disables the Tab char
    (setq-default indent-tabs-mode nil)
    ;; Sets the default tab width to 4 spaces
    (setq-default tab-width 4)
    ;; Enable automatic indentations
    (electric-indent-mode +1)
    ;; Prevent electric indent from indenting previous line
    ;; As mentioned here: https://dougie.io/emacs/indentation/#changing-the-tab-width
    (setq-default electric-indent-inhibit t)
    #+END_SRC

    <TAB> (as spaces) offsets

    #+BEGIN_SRC emacs-lisp
    (setq-default c-basic-offset 4)
    (setq-default coffee-tab-width 4)
    (setq-default javascript-indent-level 4)
    (setq-default js-indent-level 4)
    (setq-default js2-basic-offset 4)
    (setq-default lisp-indent-offset 2)
    (setq-default org-list-indent-offset 2)
    (setq-default web-mode-markup-indent-offset 4)
    (setq-default web-mode-css-indent-offset 4)
    (setq-default web-mode-code-indent-offset 4)
    (setq-default css-indent-offset 4)

    #+END_SRC

    # --------------------------------------------------- #
    # TODO: When I have time (or *ambition*), go through
    # and customize this usage instead:
    # --------------------------------------------------- #

    Source: http://blog.binchen.org/posts/easy-indentation-setup-in-emacs-for-web-development.html
#    #+BEGIN_SRC emacs-lisp
    (defun my-setup-indent (n)
        ;; java/c/c++
        (setq-local c-basic-offset n)
        ;; web development
        (setq-local coffee-tab-width n) ; coffeescript
        (setq-local javascript-indent-level n) ; javascript-mode
        (setq-local js-indent-level n) ; js-mode
        (setq-local js2-basic-offset n) ; js2-mode, in latest js2-mode, it's alias of js-indent-level
        (setq-local lisp-indent-offset n) ; (e)lisp
        (setq-local web-mode-markup-indent-offset n) ; web-mode, html tag in html file
        (setq-local web-mode-css-indent-offset n) ; web-mode, css in html file
        (setq-local web-mode-code-indent-offset n) ; web-mode, js code in html file
        (setq-local css-indent-offset n) ; css-mode
    )

    (defun my-office-code-style ()
        (interactive)
        (message "Office code style!")
        ;; use tab instead of space
        (setq-local indent-tabs-mode t)
        ;; indent 4 spaces width
        (my-setup-indent 4))

    (defun my-personal-code-style ()
        (interactive)
        (message "My personal code style!")
        ;; use space instead of tab
        (setq indent-tabs-mode nil)
        ;; indent 2 spaces width
        (my-setup-indent 2))

    (defun my-setup-develop-environment ()
        (interactive)
        (let ((proj-dir (file-name-directory (buffer-file-name))))
            ;; if hobby project path contains string "hobby-proj1"
            (if (string-match-p "hobby-proj1" proj-dir)
                (my-personal-code-style))

            ;; if commericial project path contains string "commerical-proj"
            (if (string-match-p "commerical-proj" proj-dir)
                (my-office-code-style))))

    ;; prog-mode-hook requires emacs24+
    (add-hook 'prog-mode-hook 'my-setup-develop-environment)
    ;; a few major-modes does NOT inherited from prog-mode
    (add-hook 'lua-mode-hook 'my-setup-develop-environment)
    (add-hook 'web-mode-hook 'my-setup-develop-environment)
#    #+END_SRC

** Tweak window UI
*** Disable the tool & menu bars

    #+BEGIN_SRC emacs-lisp
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    #+END_SRC

*** Disable the scroll bars

    #+BEGIN_SRC emacs-lisp
    (scroll-bar-mode -1)
    ;; Hide the minibuffer window's scrollbar
    (set-window-scroll-bars (minibuffer-window) nil nil)
    #+END_SRC

*** Disable welcome screen

    #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-screen t)
    #+END_SRC

*** Open Emacs as fullscreen by default

    #+BEGIN_SRC emacs-lisp
    (add-to-list 'default-frame-alist '(fullscreen . maximized))
    #+END_SRC


** Web browser (internal)
    Eww

    #+BEGIN_SRC emacs-lisp
    (setq browse-url-browser-function 'eww-browse-url)
    #+END_SRC

** TODO Whitespace (trailing)

    #+BEGIN_SRC emacs-lisp
    ;; Before each save, trim the excess whitespace
    (add-hook 'before-save-hook 'delete-trailing-whitespace)

    ;; Set to true by default
;; @@@@
    (setq whitespace-style '(face tabs trailing))
    (global-whitespace-mode t)
    #+END_SRC


* Keybindings
** Buffers
*** Close buffer

    #+BEGIN_SRC emacs-lisp
    (define-key <Leader> (kbd "c b") 'kill-this-buffer) ;; Close->Buffer
    (define-key <Leader> (kbd "c o b") 'kill-buffer) ;; Close->Other->Buffer [prompt buffer name]
    #+END_SRC

*** Create empty buffer
    Source: http://ergoemacs.org/emacs/emacs_new_empty_buffer.html

    #+BEGIN_SRC emacs-lisp
    (defun henry:new-empty-buffer ()
      "Create a new empty buffer.
       New buffer will be named “untitled” or “untitled<2>”, “untitled<3>”, etc.
       It returns the buffer (for elisp programing)."
     (interactive)
     (let (($buf (generate-new-buffer "Untitled")))
       (switch-to-buffer $buf)
       (funcall initial-major-mode)
       (setq buffer-offer-save t)
       $buf))

    (define-key <Leader> (kbd "n b") 'henry:new-empty-buffer)
    #+END_SRC

*** Ibuffer
    Open Ibuffer

    #+BEGIN_SRC emacs-lisp
    (define-key <Leader> (kbd "b") 'ibuffer)
    #+END_SRC

    Config Ibuffer settings

    #+BEGIN_SRC emacs-lisp
    ;; Force Ibuffer to use Evil keybindings
    (evil-set-initial-state 'ibuffer-mode 'normal)
    ;; Prevents prompting for permission to delete unmodified buffers
    (setq ibuffer-expert t)
    ;; Don't show groups that are empty
    (setq ibuffer-show-empty-filter-groups nil)
    #+END_SRC

    When opening Ibuffer, automatically highlight the most recent buffer.
    Source: https://stackoverflow.com/questions/3417438/close-all-buffers-besides-the-current-one-in-emacs

    #+BEGIN_SRC emacs-lisp
    (defadvice ibuffer (around ibuffer-point-to-most-recent) ()
      "Open ibuffer with cursor pointed to most recent buffer name."
      (let ((recent-buffer-name (buffer-name)))
        ad-do-it
        (ibuffer-jump-to-buffer recent-buffer-name)))

    (ad-activate 'ibuffer)
    #+END_SRC


    Kills all buffers besides the active one.
    Souce: https://www.emacswiki.org/emacs/KillingBuffers#toc2

    #+BEGIN_SRC emacs-lisp
    (defun henry:kill-other-buffers ()
      "Kills all other buffers."
      (interactive)
      (mapc 'kill-buffer (delq (current-buffer) (buffer-list)))
      (message "Killed all of the other buffers!"))

    ;; Close->All (other)->Buffers
    (define-key <Leader> (kbd "c a b") 'henry:kill-other-buffers)
    #+END_SRC

    Kills all Dired Mode buffers.
    Source: https://www.emacswiki.org/emacs/KillingBuffers#toc3

    #+BEGIN_SRC emacs-lisp
    (defun henry:kill-dired-buffers ()
      "Kills all Dired Mode buffers."
      (interactive)
      (mapc (lambda (buffer)
              (when (eq 'dired-mode (buffer-local-value 'major-mode buffer))
                (kill-buffer buffer)))
            (buffer-list))
      (message "Killed Dired buffers!"))

    ;; Close->Dired->Buffers
    (define-key <Leader> (kbd "c d b") 'henry:kill-dired-buffers)
    #+END_SRC

    Creates custom Ibuffer groups
    Based on: http://martinowen.net/blog/2010/02/03/tips-for-emacs-ibuffer.html

    #+BEGIN_SRC emacs-lisp
    (setq ibuffer-saved-filter-groups
      '(("personal"
          ("C++" (mode . c++-mode))
;;          ("C++ Headers" (filename . "\*.h"))
;;          ("C++ Source Files" (filename . "\*.cpp"))
          ("Web Development" (or (mode . html-mode)
            (mode . css-mode)))
          ("Magit" (name . "\*magit"))
          ("Emacs Config/Settings" (or (filename . ".emacs")
            (filename . "settings.org")))
          ("Help" (or (name . "\*Help\*")
            (name . "\*Apropos\*")
            (name . "\*info\*"))))))

    (add-hook 'ibuffer-mode-hook
      '(lambda ()
        (ibuffer-auto-mode 1) ;; Keeps the buffer list up-to-date
        (ibuffer-switch-to-saved-filter-groups "personal")))

    #+END_SRC

*** TODO Swap between previous buffer
    Source: https://emacsredux.com/blog/2013/04/28/switch-to-previous-buffer/

    TODO: Buffer List ruins this... Figure out a fix.

    #+BEGIN_SRC emacs-lisp
    (defun henry:switch-to-previous-buffer ()
      "Switch to previously open buffer.

Repeated invocations toggle between the two most recently open buffers."
      (interactive)
      (switch-to-buffer (other-buffer (current-buffer) 1)))

    (define-key <Leader> (kbd "s b") 'henry:switch-to-previous-buffer)
    #+END_SRC

*** Swap to *Scratch*
    #+BEGIN_SRC emacs-lisp
    (defun henry:swap-to-scratch ()
      "Changes buffer to the *Scratch* buffer."
      (interactive)
      (switch-to-buffer "*scratch*"))
    (define-key <Leader> (kbd "s t s") 'henry:swap-to-scratch)
    #+END_SRC

** Double space (Normal Mode)

    #+BEGIN_SRC emacs-lisp
    (defun henry:double-space ()
      "Creates a single blank space when the space key is pressed twice; finishes in Evil's Normal Mode."
      (interactive)
      (evil-insert-state)
      (insert " ")
      (evil-normal-state))

    (define-key <Leader> (kbd "SPC") 'henry:double-space)
    #+END_SRC

** TODO Compiler

    #+BEGIN_SRC emacs-lisp
    ;; Compile->Makefile
    (define-key <Leader> (kbd "c m") '(lambda ()
        (interactive) (compile "make all") (other-window 1)))
    #+END_SRC

** Evaluate Elisp (sexp)

    #+BEGIN_SRC emacs-lisp
    (defun henry:sexp-at-end-of-line ()
      "Jumps to the end of the line and runs 'eval-last-sexp'."
      (interactive)
      (move-end-of-line 1)
      (call-interactively 'eval-last-sexp))

    (define-key <Leader> (kbd "e l") 'henry:sexp-at-end-of-line)
    #+END_SRC

** Jump to beginning / end of line

    #+BEGIN_SRC emacs-lisp
    ;; Think: Move->First/Last
    (define-key <Leader> (kbd "m f") (kbd "^"))
    (define-key <Leader> (kbd "m l") (kbd "$"))
    #+END_SRC

** Jump above or below current line

    #+BEGIN_SRC emacs-lisp
    (defun henry:new-blank-line-above ()
      "Create blank line above cursor without entering Insert Mode."
      (interactive)
      (move-beginning-of-line nil)
      (newline)
      (forward-line -1))

    (defun henry:new-blank-line-below ()
      "Create blank line below cursor without entering Insert Mode."
      (interactive)
      (move-end-of-line nil)
      (newline))

    (define-key evil-normal-state-map (kbd "O") 'henry:new-blank-line-above)
    (define-key evil-normal-state-map (kbd "o") 'henry:new-blank-line-below)
    #+END_SRC

** Reload Emacs settings

    #+BEGIN_SRC emacs-lisp
    (defun henry:reload-settings ()
      "Reload Emacs settings files"
      (interactive)
      (load "~/.emacs")
      (message "Emacs settings were reloaded."))

    (define-key <Leader> (kbd "r s") 'henry:reload-settings)
    #+END_SRC

** Save / quit

    #+BEGIN_SRC emacs-lisp
    (define-key <Leader> (kbd "w") 'save-buffer) ;; Save
    (define-key <Leader> (kbd "c e") 'save-buffers-kill-terminal) ;; Close->Emacs
    (define-key <Leader> (kbd "W") 'write-file) ;; Save-As...
    #+END_SRC

** TODO <TAB>s / indentation

    Indents a region of text

    #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "<C-M-tab>") 'indent-region)
    #+END_SRC

    -----

TODO: Having issues making this. It's mostly to get elisp to tab with
2 spaces within Org mode, but it's not working properly. Maybe add
multiple major modes?

    Alternate between 2/4 tab widths

;;    #+BEGIN_SRC emacs-lisp
    (defun henry:toggle-tab-widths ()
      "Toggles the tab widths between either 2 or 4 spaces.

By default, 4 are assumed. Toggling enables/disables 2 spaces."
      (interactive)
      (if (get 'henry:toggle-tab-widths 'using-two-spaces)
        (progn
          (setq-default tab-width 10)
          (setq-default tab-width 10)
          (message "Tab width set to: 4 spaces.")
          (put 'henry:toggle-tab-widths 'using-two-spaces nil))
        (progn
          (setq-default tab-width 2)
          (message "Tab width set to: 2 spaces.")
          (put 'henry:toggle-tab-widths 'using-two-spaces t))))

    ;; Toggle->Tab length
    (define-key <Leader> (kbd "t t") 'henry:toggle-tab-widths)
;;    #+END_SRC

** Text Scaling

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C-=") 'text-scale-decrease)
#+END_SRC

** Window management

    #+BEGIN_SRC emacs-lisp
    ;; Think: Split->Horizontal or Vertical
    (define-key <Leader> (kbd "s h") '(lambda () (interactive) (progn (split-window-below) (other-window 1))))
    (define-key <Leader> (kbd "s v") '(lambda () (interactive) (progn (split-window-right) (other-window 1))))

    ;; Move across split windows
    (define-key <Leader> (kbd "h") 'windmove-left)
    (define-key <Leader> (kbd "l") 'windmove-right)
    (define-key <Leader> (kbd "j") 'windmove-down)
    (define-key <Leader> (kbd "k") 'windmove-up)

    ;; Resize window panes
    (define-key evil-normal-state-map (kbd "<C-M-up>") 'shrink-window)
    (define-key evil-normal-state-map (kbd "<C-M-down>") 'enlarge-window)
    (define-key evil-normal-state-map (kbd "<C-M-left>") 'shrink-window-horizontally)
    (define-key evil-normal-state-map (kbd "<C-M-right>") 'enlarge-window-horizontally)

    ;; Close active window
    (define-key <Leader> (kbd "c w") 'delete-window)

    (define-key <Leader> (kbd "S-j") #'other-window)
    (define-key <Leader> (kbd "S-k") #'prev-window)
    (defun prev-window ()
      (interactive)
      (other-window -1))
    #+END_SRC

** Word wrap (toggle)

    #+BEGIN_SRC emacs-lisp
    (define-key <Leader> (kbd "t w") 'toggle-truncate-lines)
    #+END_SRC


** New/Open/Edit
*** Edit Settings (shortcut)

    TODO Check OS before trying to access settings file

    #+BEGIN_SRC emacs-lisp
    ;; Think: Edit->Settings
    (define-key <Leader> (kbd "e s") (lambda()
      (interactive)
      (message "Loading Emacs Settings.org file...")
      (find-file "~/.emacs.d/settings.org")))
    #+END_SRC

*** File and folder management
**** Open Dired

    #+BEGIN_SRC emacs-lisp
    (define-key <Leader> (kbd "o d") 'dired)
    #+END_SRC

**** Open File

    #+BEGIN_SRC emacs-lisp
    (define-key <Leader> (kbd "o f") 'find-file)
    #+END_SRC

**** Open recent files

    #+BEGIN_SRC emacs-lisp
    (define-key <Leader> (kbd "o r") 'recentf-open-files)
    #+END_SRC

*** TODO Terminal

    TODO: Default terminal based on OS
    TODO: Automatically split vertically or horizontally based on available screen estate

    #+BEGIN_SRC emacs-lisp
    (defun henry:open-terminal (&optional arg)
      "Open a Terminal buffer.

Passing \"v\" or \"h\" will split the window vertically or
horizontally, respectively."
      (interactive "sSplit window? (\"v\" or \"h\"):")
      (cond
        ((string= arg "v")
          (progn
            (message "Opening Terminal (vertically).")
            (split-window-right)
            (other-window 1)))
        ((string= arg "h")
          (progn
            (message "Opening Terminal (horizontally).")
            (split-window-below)
            (other-window 1)))
        ((string= arg nil) (message "Opening Terminal.")))
      (set-buffer (make-term "terminal" "bash"))
;;    (term "bash")
      (switch-to-buffer "*terminal*"))


    (define-key <Leader> (kbd "o t") '(lambda () (interactive) (henry:open-terminal)))
    (define-key <Leader> (kbd "o v t") '(lambda () (interactive) (henry:open-terminal "v")))
    (define-key <Leader> (kbd "o h t") '(lambda () (interactive) (henry:open-terminal "h")))
    #+END_SRC

** Toggles
*** DONE Comment/uncomment

    TODO Verify how well this works
    TODO Switch to NERD-Commenter

    #+BEGIN_SRC emacs-lisp
    ;; Source: https://stackoverflow.com/questions/9688748/emacs-comment-uncomment-current-line
    (defun henry:toggle-comment-on-line ()
      "Comment or uncomment the current line"
      (interactive)
      (comment-or-uncomment-region (line-beginning-position) (line-end-position)))

;;    (define-key <Leader> (kbd "/") 'henry:toggle-comment-on-line)
    #+END_SRC


* Closure
#+BEGIN_SRC emacs-lisp
(run-with-idle-timer 5 nil (lambda ()
  (setq-default gc-cons-threshold 1000000)
  (message "gc-cons-threshold restored to %s" gc-cons-threshold)))

(run-with-idle-timer 7 nil (lambda ()
  (message "Finished loading emacs settings.")))
#+END_SRC
