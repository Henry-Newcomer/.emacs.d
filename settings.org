
# ============================================================================
# ****************************************************************************
#+TITLE: Emacs Settings
#+AUTHOR: Henry Newcomer
# ****************************************************************************
# ============================================================================

* #TODOs
** TODO Switch to use-package format for all plugins (does this matter due to how my setup works?)
** TODO Make a global Toggle function
** TODO Group keybindings into their own inner-lists (new, toggle, etc)

** Keybindings
*** TODO Set toggle for tab's space count, OR make keybinding for tab=2 and for tab=4
*** TODO Make sexp keybinding for normal and visual [SPC e]; Auto jump to end of line (or last closing parenthesis?)
*** TODO Change keybinding for jumping to a mark - default: ` (backtick)
*** TODO Jump to last buffer
*** TODO Open last file


* Startup
** Init
*** Garbage Collection
    Drastically increase the garbage collection until the end of
    this file. Afterwards, lower it back down.

    Source: https://www.reddit.com/r/emacs/comments/3kqt6e/2_easy_little_known_steps_to_speed_up_emacs_start/

    #+BEGIN_SRC emacs-lisp
    (setq-default gc-cons-threshold 100000000)
    #+END_SRC

*** Operating System
    Detects the current Operating System
    #+BEGIN_SRC emacs-lisp
    (defun henry:detect-os ()
    "Detects the current system's Operating System."

      (setq henry:current-os-detected nil)

      (cond
        ((string-equal system-type "gnu/linux")
          (setq henry:current-os "Linux")
          (setq henry:current-os-detected t))
        ((string-equal system-type "windows-nt")
          (setq henry:current-os "Windows")
          (setq henry:current-os-detected t))
        ((string-equal system-type "darwin")
          (setq henry:current-os "OSX")
          (setq henry:current-os-detected t)))

    (if henry:current-os-detected
        (progn
          (message (concat "Current OS detected: " henry:current-os)))
        (progn
          (message "Warning! OS detection failed!"))))

    ;; Initiates the function
    (henry:detect-os)
    #+END_SRC

*** <Leader> key

    #+BEGIN_SRC emacs-lisp
    (defvar <Leader> (make-sparse-keymap)
      "Keymap for custom \"<Leader>\" keybindings.")
    #+END_SRC

** Repositories
*** Repository sources
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
#+END_SRC

*** Required (before package customizations)
#+BEGIN_SRC emacs-lisp
(package-initialize)
#+END_SRC



* Package Settings
** :: LIST OF PACKAGES ::
    #+BEGIN_SRC emacs-lisp
    (defvar my-packages

     '(ace-window
      auto-complete
      clang-format
      counsel-etags
      dashboard
      doom-themes
      dumb-jump
      evil
      evil-surround
      evil-magit
      ;;fly-check
      git-gutter
      helm
      highlight-indent-guides
      ivy
      ;;lispy
      magit
      modern-cpp-font-lock
      multiple-cursors
      org-bullets
      page-break-lines
      ;;projectile
      rainbow-delimiters
      solaire-mode
      telephone-line
      undo-tree)
;;      visual-regexp)

    "A list of packages to install if not locally found.")
    #+END_SRC

*** Check for package installations & upgrades

    #+BEGIN_SRC emacs-lisp
    (defun my-packages-installed-p ()
      (cl-loop for p in my-packages
              when (not (package-installed-p p)) do (cl-return nil)
              finally (cl-return t)))
      (unless (my-packages-installed-p)
      ;; Check for new packages (package versions)
      (package-refresh-contents)
      ;; Install the missing packages
      (dolist (p my-packages)
          (when (not (package-installed-p p))
          (package-install p))))
    #+END_SRC




** Initialize Evil Mode

    #+BEGIN_SRC emacs-lisp
    (setq evil-want-C-u-scroll t)
    (require 'evil)
    (evil-mode 1)

;;    (define-key evil-normal-state-map (kbd "SPC") 'nil)
    (define-key evil-normal-state-map (kbd "SPC") <Leader>)

    ;;(define-key <Leader> (kbd "h") 'test)
    #+END_SRC

** TODO Ace Window
    Repo: https://github.com/abo-abo/ace-window
    TODO: Change keybinding for command, customize extra settings
    #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "M-o") 'ace-window)
    #+END_SRC

** Auto-Complete
    Repo: https://github.com/auto-complete/auto-complete
    #+BEGIN_SRC emacs-lisp
    (ac-config-default)

;;(define-key ac-mode-map (kbd "M-TAB") 'auto-complete)
    (ac-set-trigger-key "TAB")
    (setq ac-auto-start nil)
    #+END_SRC

** Clang Format
    Repo: https://clang.llvm.org/docs/ClangFormat.html

    #+BEGIN_SRC emacs-lisp
    (global-set-key [C-M-f] 'clang-format-region)
    #+END_SRC

** Dashboard
    Repo: https://github.com/rakanalh/emacs-dashboard

    #+BEGIN_SRC emacs-lisp
;;    (require 'dashboard)
    (dashboard-setup-startup-hook)

    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))

    ;; Set the title
    ;;  - Time and gc info from:
    ;; https://www.reddit.com/r/emacs/comments/8jaflq/tip_how_to_use_your_dashboard_properly/
    (setq dashboard-banner-logo-title
      (format "Emacs Dashboard: %.2f seconds to load & %d garbage collections."
        (float-time (time-subtract after-init-time before-init-time)) gcs-done))

    ;; Set the banner
    (setq dashboard-startup-banner 'logo)
    ;; Value can be
    ;; 'official which displays the official emacs logo
    ;; 'logo which displays an alternative emacs logo
    ;; 1, 2 or 3 which displays one of the text banners
    ;; "path/to/your/image.png" which displays whatever image you would prefer

    (setq dashboard-items '((recents  . 10)
                            (bookmarks . 5)
                            (projects . 5)))
    ;;                        (agenda . 5)
    ;;                        (registers . 5)))
    #+END_SRC

** Doom Themes
    Repo: https://github.com/hlissner/emacs-doom-themes#install

    #+BEGIN_SRC emacs-lisp
    (require 'doom-themes)

    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled

    ;; Load the specific theme
    (load-theme 'doom-city-lights t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)

    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config)
    #+END_SRC

** TODO Evil Surround
   Repo: https://github.com/emacs-evil/evil-surround

#+BEGIN_SRC emacs-lisp
#+END_SRC

** TODO Flycheck
   Repo: https://github.com/flycheck/flycheck

#+BEGIN_SRC emacs-lisp
;;(add-hook 'after-init-hook #'global-flycheck-mode)
#+END_SRC

** Git Gutter
    Repo: https://github.com/syohex/emacs-git-gutter

    #+BEGIN_SRC emacs-lisp
    (global-git-gutter-mode +1)
    #+END_SRC

** TODO Helm
   Repo: https://github.com/emacs-helm/helm

#+BEGIN_SRC emacs-lisp
#+END_SRC

** Highlight Indent Guides

    Repo: https://github.com/DarthFennec/highlight-indent-guides
    #+BEGIN_SRC emacs-lisp
    (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
    (setq highlight-indent-guides-method 'character)
    #+END_SRC

** Ivy / Swiper

    Repo: https://github.com/abo-abo/swiper
    #+BEGIN_SRC emacs-lisp
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)

    (define-key <Leader> (kbd "s s") 'swiper) ;; Swiper->Search
    (define-key <Leader> "f" 'project-find-file)

;; ~~~
;; Possible config additions:
;;    (global-set-key "\C-s" 'swiper)
;;    (global-set-key (kbd "C-c C-r") 'ivy-resume)
;;    (global-set-key (kbd "<f6>") 'ivy-resume)
;;    (global-set-key (kbd "M-x") 'counsel-M-x)
;;    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
;;    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
;;    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
;;    (global-set-key (kbd "<f1> l") 'counsel-find-library)
;;    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
;;    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
;;    (global-set-key (kbd "C-c g") 'counsel-git)
;;    (global-set-key (kbd "C-c j") 'counsel-git-grep)
;;    (global-set-key (kbd "C-c k") 'counsel-ag)
;;    (global-set-key (kbd "C-x l") 'counsel-locate)
;;    (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
;;    (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
    #+END_SRC

** TODO Lispy
    Repo: https://github.com/abo-abo/lispy

    #+BEGIN_SRC emacs-lisp
    ;;(add-hook 'emacs-lisp-mode-hook (lambda () (lispy-mode 1)))
    #+END_SRC

** Magit

    #+BEGIN_SRC emacs-lisp
    (setq evil-magit-state 'normal)
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
    (define-key <Leader> "g" 'magit-status)
    (define-key <Leader> "G" 'magit-dispatch-popup)
    #+END_SRC

** Modern C++ Font Lock
    Repo: https://github.com/ludwigpacifici/modern-cpp-font-lock

    #+BEGIN_SRC emacs-lisp
    (add-hook 'c++-mode-hook #'modern-c++-font-lock-mode)
    #+END_SRC

** TODO Multiple Cursors
   Repo: https://github.com/magnars/multiple-cursors.el

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)

;;(global-set-key (kbd "C->") 'mc/mark-next-like-this)
;;(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
;;(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+END_SRC

** Org Mode

    Customizes the colors
    Source: https://orgmode.org/manual/Faces-for-TODO-keywords.html
    #+BEGIN_SRC emacs-lisp
    (setq org-todo-keyword-faces
        '(("TODO" . "#3399ff") ("STARTED" . "yellow")
            ("CANCELED" . (:foreground "blue" :weight bold))))
    #+END_SRC

    Improved bullet symbols
    #+BEGIN_SRC emacs-lisp
    ;; Only customize the bullet symbols when on a Linux distro
    (cond
      ((string-equal system-type "gnu/linux")
         ;;(require 'org-bullets)
         (setq org-bullets-bullet-list
             '("◉" "◎"))
         :config
             (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))))
    #+END_SRC

    Attempt to improve org-mode performance
    #+BEGIN_SRC emacs-lisp
    ;; Source: https://www.reddit.com/r/emacs/comments/98flwy/does_anyone_know_a_good_alternative_to_orgbullets/
    (setq inhibit-compacting-font-caches t)
    #+END_SRC

** TODO Projectile

#+BEGIN_SRC emacs-lisp
;;(projectile-mode +1)
;;(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+END_SRC

** TODO PHP mode

#+BEGIN_SRC emacs-lisp
;;(add-to-list 'load-path "~/.emacs.d/from_backup/php-mode")
;;(require 'php-mode)
#+END_SRC

** Rainbow Delimiters

    #+BEGIN_SRC emacs-lisp
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
    #+END_SRC

** TODO Solaire Mode
    TODO: Set colors

    Repo: https://github.com/hlissner/emacs-solaire-mode

    #+BEGIN_SRC emacs-lisp
    ;; Enable solaire-mode anywhere it can be enabled
    (solaire-global-mode +1)

    ;; Highlight the minibuffer when it is activated
    (add-hook 'minibuffer-setup-hook #'solaire-mode-in-minibuffer)

    ;; If the bright and dark background colors are the wrong way around, use this
    ;; to switch the backgrounds of the `default` and `solaire-default-face` faces.
    ;; This should be used *after* you load the active theme!
    ;;
    ;; NOTE: This is necessary for themes in the doom-themes package!
    (solaire-mode-swap-bg)

    ;; An alternative for 'use-package' users:
;;    (use-package solaire-mode
;;        :hook ((change-major-mode after-revert ediff-prepare-buffer) . turn-on-solaire-mode)
;;        :config
;;        (add-hook 'minibuffer-setup-hook #'solaire-mode-in-minibuffer)
;;        (solaire-mode-swap-bg))
    #+END_SRC

** Telephone-line
    Repo: https://github.com/dbordak/telephone-line

    #+BEGIN_SRC emacs-lisp
    (setq telephone-line-primary-left-separator 'telephone-line-cubed-left
        telephone-line-secondary-left-separator 'telephone-line-cubed-hollow-left
        telephone-line-primary-right-separator 'telephone-line-cubed-right
        telephone-line-secondary-right-separator 'telephone-line-cubed-hollow-right)
    (setq telephone-line-height 16)
    (telephone-line-mode 1)
    #+END_SRC

** TODO Undo Tree

    #+BEGIN_SRC emacs-lisp
    (global-undo-tree-mode 1)

    (define-key evil-normal-state-map (kbd "u") 'undo)
    (define-key evil-normal-state-map (kbd "C-r") 'undo-tree-redo)
    (define-key <Leader> (kbd "C-r") 'undo-tree-visualize)
    #+END_SRC

#+BEGIN_SRC emacs-lisp
#+END_SRC


* General emacs settings
** Automatic backups
    Source: https://www.emacswiki.org/emacs/ForceBackups

    #+BEGIN_SRC emacs-lisp
    ;; Default and per-save backups go here:
    (setq backup-directory-alist '(("" . "~/.emacs.d/backups/per-save")))

    (defun force-backup-of-buffer ()
    ;; Make a special "per session" backup at the first save of each
    ;; emacs session.
    (when (not buffer-backed-up)
        ;; Override the default parameters for per-session backups.
        (let ((backup-directory-alist '(("" . "~/.emacs.d/backups/per-session")))
            (kept-new-versions 3))
        (backup-buffer)))
    ;; Make a "per save" backup on each save.  The first save results in
    ;; both a per-session and a per-save backup, to keep the numbering
    ;; of per-save backups consistent.
    (let ((buffer-backed-up nil))
        (backup-buffer)))

    (add-hook 'before-save-hook  'force-backup-of-buffer)
    #+END_SRC

** Cursor

    #+BEGIN_SRC emacs-lisp
    ;; TODO: Not working?
    ;;(set-default 'cursor-type 'bar)

    ;; Don't blink the cursor
    (blink-cursor-mode -1)
    #+END_SRC

** Dired Mode

    Auto-refresh dired on file change
    #+BEGIN_SRC emacs-lisp
    (add-hook 'dired-mode-hook 'auto-revert-mode)
    #+END_SRC

** Font settings
    Set default language and encodings

    #+BEGIN_SRC emacs-lisp
    (setenv "LANG" "en_US.UTF-8")
    (setenv "LC_ALL" "en_US.UTF-8")
    (setenv "LC_CTYPE" "en_US")
    (set-locale-environment "English")
    (set-language-environment 'English)
    (prefer-coding-system 'utf-8)
    (set-buffer-file-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)
    (set-selection-coding-system 'utf-8)
    (set-file-name-coding-system 'utf-8)
    (set-terminal-coding-system 'utf-8)
    #+END_SRC

** Highlight current line

    #+BEGIN_SRC emacs-lisp
    (global-hl-line-mode +1)
    #+END_SRC

** Ido

    #+BEGIN_SRC emacs-lisp
    ;; Source: https://www.masteringemacs.org/article/introduction-to-ido-mode
    (setq ido-enable-flex-matching t)
    (setq ido-everywhere t)
    (ido-mode 1)
    (setq ido-separator "\n")
    (setq ido-use-filename-at-point 'guess)
    (setq ido-create-new-buffer 'always)
    (setq ido-file-extensions-order '(".org" ".cpp" ".h" ".php" ".html" ".css"))
    #+END_SRC

** Parentheses, braces, & brackets pairs

    #+BEGIN_SRC emacs-lisp
    (show-paren-mode 1)
    (setq show-paren-delay 0)

    ;;(require 'paren)
    ;;(set-face-background 'show-paren-match (face-background 'default))
    ;;(set-face-foreground 'show-paren-match "#def")
    ;;(set-face-attribute 'show-paren-match nil :weight 'extra-bold)
    #+END_SRC

** Prompt for Y or N (not Yes or No)

    #+BEGIN_SRC emacs-lisp
    (defalias 'yes-or-no-p 'y-or-n-p)
    #+END_SRC

** TODO Recent mode

    #+BEGIN_SRC emacs-lisp
    (recentf-mode 1)
    (setq recentf-max-menu-items 25)
    (global-set-key "\C-x\ \C-r" 'recentf-open-files)
    #+END_SRC

** TODO Relative line numbers (set custom colors)

    #+BEGIN_SRC emacs-lisp
    (setq-default display-line-numbers 'relative
                display-line-numbers-type 'visual
                display-line-numbers-current-absolute t
                display-line-numbers-width 4
                display-line-numbers-widen t)
    (add-hook 'text-mode-hook #'display-line-numbers-mode)
    (add-hook 'prog-mode-hook #'display-line-numbers-mode)

    ;; Customize current line
    ;;(custom-set-faces '(line-number-current-line ((t :weight bold
    ;;                                                 :foreground "goldenrod"
    ;;                                                 :background "slate gray"))))
    #+END_SRC

** Scrolling

    #+BEGIN_SRC emacs-lisp
    (setq scroll-step 1)
    (setq scroll-sconservatively 10000)
    (setq auto-window-vscroll nil)
    #+END_SRC

** Sound

    Disable the alert bell sound effect
    #+BEGIN_SRC emacs-lisp
    (setq ring-bell-function 'ignore)
    #+END_SRC

** Startup

    #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-message t)
    (setq initial-scratch-message nil)
    #+END_SRC

** TODO <TAB>s / indentation

    General default attributes
    #+BEGIN_SRC emacs-lisp
    (setq-default indent-tabs-mode nil) ;; Disables tab char
    (setq-default tab-width 4)
    #+END_SRC

    # --------------------------------------------------- #
    # TODO: Go through this and customize it to my liking:
    # --------------------------------------------------- #

    Source: http://blog.binchen.org/posts/easy-indentation-setup-in-emacs-for-web-development.html
#    #+BEGIN_SRC emacs-lisp
    (defun my-setup-indent (n)
        ;; java/c/c++
        (setq-local c-basic-offset n)
        ;; web development
        (setq-local coffee-tab-width n) ; coffeescript
        (setq-local javascript-indent-level n) ; javascript-mode
        (setq-local js-indent-level n) ; js-mode
        (setq-local js2-basic-offset n) ; js2-mode, in latest js2-mode, it's alias of js-indent-level
        (setq-local lisp-indent-offset n) ; (e)lisp
        (setq-local web-mode-markup-indent-offset n) ; web-mode, html tag in html file
        (setq-local web-mode-css-indent-offset n) ; web-mode, css in html file
        (setq-local web-mode-code-indent-offset n) ; web-mode, js code in html file
        (setq-local css-indent-offset n) ; css-mode
    )

    (defun my-office-code-style ()
        (interactive)
        (message "Office code style!")
        ;; use tab instead of space
        (setq-local indent-tabs-mode t)
        ;; indent 4 spaces width
        (my-setup-indent 4))

    (defun my-personal-code-style ()
        (interactive)
        (message "My personal code style!")
        ;; use space instead of tab
        (setq indent-tabs-mode nil)
        ;; indent 2 spaces width
        (my-setup-indent 2))

    (defun my-setup-develop-environment ()
        (interactive)
        (let ((proj-dir (file-name-directory (buffer-file-name))))
            ;; if hobby project path contains string "hobby-proj1"
            (if (string-match-p "hobby-proj1" proj-dir)
                (my-personal-code-style))

            ;; if commericial project path contains string "commerical-proj"
            (if (string-match-p "commerical-proj" proj-dir)
                (my-office-code-style))))

    ;; prog-mode-hook requires emacs24+
    (add-hook 'prog-mode-hook 'my-setup-develop-environment)
    ;; a few major-modes does NOT inherited from prog-mode
    (add-hook 'lua-mode-hook 'my-setup-develop-environment)
    (add-hook 'web-mode-hook 'my-setup-develop-environment)
#    #+END_SRC

** Tweak window UI

Disable the tool & menu bars
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
#+END_SRC

Disable the scroll bars
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
;; Hide the minibuffer window's scrollbar
(set-window-scroll-bars (minibuffer-window) nil nil)
#+END_SRC

Disable welcome screen
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
#+END_SRC

Open Emacs as fullscreen by default
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

** Web browser (internal)

    Eww
    #+BEGIN_SRC emacs-lisp
    (setq browse-url-browser-function 'eww-browse-url)
    #+END_SRC

** Whitespace/80-column limit

    #+BEGIN_SRC emacs-lisp
    #+END_SRC


* Keybindings
** Buffers

    #+BEGIN_SRC emacs-lisp

    ;; Source: http://ergoemacs.org/emacs/emacs_new_empty_buffer.html
    (defun henry:new-empty-buffer ()
      "Create a new empty buffer.
       New buffer will be named “untitled” or “untitled<2>”, “untitled<3>”, etc.
       It returns the buffer (for elisp programing)."
     (interactive)
     (let (($buf (generate-new-buffer "Untitled")))
       (switch-to-buffer $buf)
       (funcall initial-major-mode)
       (setq buffer-offer-save t)
       $buf))

    (define-key <Leader> (kbd "n b") 'henry:new-empty-buffer)
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
    (defun henry:swap-to-scratch ()
      "Changes buffer to the *Scratch* buffer."
      (interactive)
      (switch-to-buffer "*scratch*"))
    (define-key <Leader> (kbd "s t s") 'henry:swap-to-scratch)
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
    (define-key <Leader> (kbd "b") 'buffer-menu)
    (define-key <Leader> (kbd "c b") 'kill-this-buffer) ;; Close->Buffer
    (define-key <Leader> (kbd "c o b") 'kill-buffer) ;; Close->Other->Buffer [prompt buffer name]
    #+END_SRC

** Double space (Normal Mode)

    #+BEGIN_SRC emacs-lisp
    (defun henry:double-space ()
      "Creates a single blank space when the space key is pressed twice; finishes in Evil's Normal Mode."
      (interactive)
      (evil-insert-state)
      (insert " ")
      (evil-normal-state))

    (define-key <Leader> (kbd "SPC") 'henry:double-space)
    #+END_SRC

** Jump to beginning / end of line

    #+BEGIN_SRC emacs-lisp
    ;; Think: Move->First/Last
    (define-key <Leader> (kbd "m f") (kbd "^"))
    (define-key <Leader> (kbd "m l") (kbd "$"))
    #+END_SRC

** Jump above or below current line

    #+BEGIN_SRC emacs-lisp
    (defun henry:new-blank-line-above ()
      "Create blank line above cursor without entering Insert Mode."
      (interactive)
      (move-beginning-of-line nil)
      (newline)
      (forward-line -1))

    (defun henry:new-blank-line-below ()
      "Create blank line below cursor without entering Insert Mode."
      (interactive)
      (move-end-of-line nil)
      (newline))

    (define-key evil-normal-state-map (kbd "O") 'henry:new-blank-line-above)
    (define-key evil-normal-state-map (kbd "o") 'henry:new-blank-line-below)
    #+END_SRC

** Reload Emacs settings

    #+BEGIN_SRC emacs-lisp
    (defun henry:reload-settings ()
      "Reload Emacs settings files"
      (interactive)
      (load "~/.emacs")
      (message "Emacs settings were reloaded."))

    (define-key <Leader> (kbd "r s") 'henry:reload-settings)
    #+END_SRC

** Save / quit

    #+BEGIN_SRC emacs-lisp
    (define-key <Leader> (kbd "w") 'save-buffer) ;; Save
    (define-key <Leader> (kbd "c e") 'save-buffers-kill-terminal) ;; Close->Emacs
    (define-key <Leader> (kbd "W") 'write-file) ;; Save-As...
    #+END_SRC

** Text Scaling

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C-=") 'text-scale-decrease)
#+END_SRC

** TODO Whitespace/80-column limit (toggle)

    #+BEGIN_SRC emacs-lisp
    (defun henry:custom-toggle-column-limit ()
      "Toggles the column limit from 80 to unlimited"
      (interactive)
      (if (get 'henry:custom-toggle-column-limit 'state)
        (progn
          (message "80-column limit indicator DISABLED.")
          (global-whitespace-mode -1)
          (put 'henry:custom-toggle-column-limit 'state nil))
        (progn
          (message "80-column limit indicator ENABLED.")
          (global-whitespace-mode t)
          (put 'henry:custom-toggle-column-limit 'state t))))

    ;; Toggle->Limit
    (define-key <Leader> (kbd "t l") 'henry:custom-toggle-column-limit)

    ;; Set to true by default
    (put 'henry:custom-toggle-column-limit 'state t)
    (setq whitespace-style '(face tabs lines-tail trailing))
    (global-whitespace-mode t)
    #+END_SRC

** Window management

    #+BEGIN_SRC emacs-lisp
    ;; Think: Split->Horizontal or Vertical
    (define-key <Leader> (kbd "s h") 'split-window-below)
    (define-key <Leader> (kbd "s v") 'split-window-right)

    ;; Move across split windows
    (define-key <Leader> (kbd "h") 'windmove-left)
    (define-key <Leader> (kbd "l") 'windmove-right)
    (define-key <Leader> (kbd "j") 'windmove-down)
    (define-key <Leader> (kbd "k") 'windmove-up)

    ;; Resize window panes
    (define-key evil-normal-state-map (kbd "<C-M-up>") 'shrink-window)
    (define-key evil-normal-state-map (kbd "<C-M-down>") 'enlarge-window)
    (define-key evil-normal-state-map (kbd "<C-M-left>") 'shrink-window-horizontally)
    (define-key evil-normal-state-map (kbd "<C-M-right>") 'enlarge-window-horizontally)

    ;; Close active window
    (define-key <Leader> (kbd "c w") 'delete-window)

    (define-key <Leader> (kbd "S-j") #'other-window)
    (define-key <Leader> (kbd "S-k") #'prev-window)
    (defun prev-window ()
      (interactive)
      (other-window -1))
    #+END_SRC

** TODO Word wrap (toggle)
    TODO: ADD TOGGLE

    #+BEGIN_SRC emacs-lisp
    (define-key <Leader> (kbd "t w") 'toggle-truncate-lines)
    #+END_SRC


** New/Open/Edit
*** Edit Settings (shortcut)

    TODO Check OS before trying to access settings file

    #+BEGIN_SRC emacs-lisp
    ;; Think: Edit->Settings
    (define-key <Leader> (kbd "e s") (lambda() (interactive)(find-file "~/.emacs.d/settings.org")))
    #+END_SRC

*** File and folder management
**** Open Dired

    #+BEGIN_SRC emacs-lisp
    (define-key <Leader> (kbd "o d") 'dired)
    #+END_SRC

**** Open File

    #+BEGIN_SRC emacs-lisp
    (define-key <Leader> (kbd "o f") 'find-file)
    #+END_SRC

**** Open recent files

    #+BEGIN_SRC emacs-lisp
    (define-key <Leader> (kbd "o r") 'recentf-open-files)
    #+END_SRC

*** Terminal

    TODO Default terminal based on OS

    #+BEGIN_SRC emacs-lisp
    ;; Think: New->Terminal
    (define-key <Leader> (kbd "n t") 'term)
    #+END_SRC

** Toggles
*** TODO Comment/uncomment

    TODO Verify how well this works
    TODO Switch to NERD-Commenter

    #+BEGIN_SRC emacs-lisp
    ;; Source: https://stackoverflow.com/questions/9688748/emacs-comment-uncomment-current-line
    (defun henry:toggle-comment-on-line ()
      "Comment or uncomment the current line"
      (interactive)
      (comment-or-uncomment-region (line-beginning-position) (line-end-position)))

    (define-key <Leader> (kbd "/") 'henry:toggle-comment-on-line)
;;    (define-key evil-normal-state-map (kbd "SPC /") 'henry:toggle-comment-on-line)
;;    (define-key evil-visual-state-map (kbd "SPC /") 'henry:toggle-comment-on-line)
    #+END_SRC


* Closure
#+BEGIN_SRC emacs-lisp
(run-with-idle-timer 5 nil (lambda ()
  (setq-default gc-cons-threshold 1000000)
  (message "gc-cons-threshold restored to %s" gc-cons-threshold)))

(run-with-idle-timer 7 nil (lambda ()
  (message "Finished loading emacs settings.")))
#+END_SRC
