
# ============================================================================
# ****************************************************************************
#+title: emacs settings
#+author: henry newcomer
# ****************************************************************************
# ============================================================================

* repositories
** repository sources
#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
#+end_src

** required (before package customizations)
#+begin_src emacs-lisp
(package-initialize)
#+end_src


* package settings
** list of packages
#+begin_src emacs-lisp
(defvar my-packages

  '(evil
    evil-leader
;;  nlinum-relative
    org-bullets
    neotree
    projectile
    undo-tree)

  "a list of packages to ensure are installed at launch.")

(defun my-packages-installed-p ()
  (cl-loop for p in my-packages
           when (not (package-installed-p p)) do (cl-return nil)
           finally (cl-return t)))
(unless (my-packages-installed-p)
  ;; check for new packages (package versions)
  (package-refresh-contents)
  ;; install the missing packages
  (dolist (p my-packages)
    (when (not (package-installed-p p))
      (package-install p))))
#+end_src


** evil <leader>
#+begin_src emacs-lisp
;; *make sure this is placed before evil mode*
(require 'evil-leader)
(global-evil-leader-mode)
(evil-leader/set-leader "<spc>")
#+end_src

** evil mode
#+begin_src emacs-lisp
;;(add-to-list 'load-path "~/.emacs.d/from_backup/evil")
(setq evil-want-c-u-scroll t)
(require 'evil)
(evil-mode 1)
#+end_src

** wrap region (not used)
#+begin_src emacs-lisp
;; (add-to-list 'load-path "~/.emacs.d/from_backup/wrap-region.el")
;; (require 'wrap-region)
#+end_src

** neotree
#+begin_src emacs-lisp
(add-to-list 'load-path "/some/path/neotree")
(require 'neotree)
(global-set-key [f8] 'neotree-toggle)
;;setq neo-theme (if (display-graphic-p) 'icons 'arrow))
#+end_src

** projectile
#+begin_src emacs-lisp
(projectile-mode +1)
;;(define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
(define-key projectile-mode-map (kbd "c-c p") 'projectile-command-map)
#+end_src

** undo tree
#+begin_src emacs-lisp
;;(add-to-list 'load-path "~/.emacs.d/from_backup/undo-tree")
(global-undo-tree-mode)
#+end_src

** relative line numbers
#+begin_src emacs-lisp
(setq-default display-line-numbers 'relative
              display-line-numbers-type 'visual
              display-line-numbers-current-absolute t
              display-line-numbers-width 4
              display-line-numbers-widen t)
(add-hook 'text-mode-hook #'display-line-numbers-mode)
(add-hook 'prog-mode-hook #'display-line-numbers-mode)
#+end_src

** improved/custom org mode bullets
#+begin_src emacs-lisp
;; check os
(cond
  ((string-equal system-type "gnu/linux")
    (require 'org-bullets)
    (setq org-bullets-bullet-list
        '("◉" "◎" "⚫" "○" "►" "◇"))
    ;;    '("?" "?" "?" "?" "?" "?"))
    :config
        (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))))
#+end_src

** php mode
#+begin_src emacs-lisp
;;(add-to-list 'load-path "~/.emacs.d/from_backup/php-mode")
;;(require 'php-mode)
#+end_src


* general emacs settings
** tweak window ui
disable the tool & menu bars
#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
#+end_src

hide the minibuffer window's scrollbar
#+begin_src emacs-lisp
(set-window-scroll-bars (minibuffer-window) nil nil)
#+end_src

disable welcome screen
#+begin_src emacs-lisp
(setq inhibit-startup-screen t)
#+end_src

open emacs as fullscreen by default
#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

** font settings
set default language and encodings
#+begin_src emacs-lisp
(setenv "lang" "en_us.utf-8")
(setenv "lc_all" "en_us.utf-8")
(setenv "lc_ctype" "en_us")
(set-locale-environment "english")
(set-language-environment 'english)
(prefer-coding-system 'utf-8)
(set-buffer-file-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(set-file-name-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
#+end_src

** highlight current line
#+begin_src emacs-lisp
(global-hl-line-mode +1)
#+end_src

** enable recent mode
#+begin_src emacs-lisp
(recentf-mode 1)
(setq recentf-max-menu-items 25)
(global-set-key "\c-x\ \c-r" 'recentf-open-files)
#+end_src

** tabs to lines
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
#+end_src
** automatic backups
#+begin_src emacs-lisp
;;; source; https://www.emacswiki.org/emacs/forcebackups
;; default and per-save backups go here:
(setq backup-directory-alist '(("" . "~/.emacs.d/backup/per-save")))

(defun force-backup-of-buffer ()
;; make a special "per session" backup at the first save of each
;; emacs session.
(when (not buffer-backed-up)
    ;; override the default parameters for per-session backups.
    (let ((backup-directory-alist '(("" . "~/.emacs.d/backup/per-session")))
        (kept-new-versions 3))
    (backup-buffer)))
;; make a "per save" backup on each save.  the first save results in
;; both a per-session and a per-save backup, to keep the numbering
;; of per-save backups consistent.
(let ((buffer-backed-up nil))
    (backup-buffer)))

(add-hook 'before-save-hook  'force-backup-of-buffer)
#+end_src


* keybindings
** removes default binding(s)
the spacebar will act as a leader key for my custom keybindings

#+begin_src emacs-lisp
(define-key evil-normal-state-map (kbd "spc") nil)
;;(define-key evil-insert-state-map (kbd "spc") (kbd "spc"))
;;(global-set-key (kbd "spc") nil)
#+end_src
** todo group/organize these better!

** quick edit settings
todo check os before trying to access settings file

#+begin_src emacs-lisp
(define-key evil-normal-state-map (kbd "spc s") (lambda() (interactive)(find-file "~/.emacs.d/settings.org")))
#+end_src

** double space (normal mode)
#+begin_src emacs-lisp
(define-key evil-normal-state-map (kbd "spc spc") (kbd "i spc esc"))
#+end_src

** dired
#+begin_src emacs-lisp
(define-key evil-normal-state-map (kbd "spc d") 'dired)
#+end_src

** jump to end of line
#+begin_src emacs-lisp
(define-key evil-normal-state-map (kbd "spc l") (kbd "$"))
#+end_src

** window management
#+begin_src emacs-lisp
(define-key evil-normal-state-map (kbd "spc h") 'split-window-below)
(define-key evil-normal-state-map (kbd "spc v") 'split-window-right)
#+end_src

move across split windows
#+begin_src emacs-lisp
(define-key evil-normal-state-map (kbd "c-m-h") 'windmove-left)
(define-key evil-normal-state-map (kbd "c-m-l") 'windmove-right)
(define-key evil-normal-state-map (kbd "c-m-k") 'windmove-up)
(define-key evil-normal-state-map (kbd "c-m-j") 'windmove-down)

(define-key evil-normal-state-map (kbd "spc j") #'other-window)
(define-key evil-normal-state-map (kbd "spc k") #'prev-window)
(defun prev-window ()
  (interactive)
  (other-window -1))
#+end_src

** open most recent file
#+begin_src emacs-lisp
(define-key evil-normal-state-map (kbd "spc r") 'recentf-open-most-recent-file)
#+end_src

** todo open terminal
todo open term in new window
todo default terminal based on os

#+begin_src emacs-lisp
(define-key evil-normal-state-map (kbd "spc t") 'term)
#+end_src
** save
#+begin_src emacs-lisp
(define-key evil-normal-state-map (kbd "spc w") 'save-buffer)
#+end_src
** quit
#+begin_src emacs-lisp
(define-key evil-normal-state-map (kbd "spc q") 'save-buffers-kill-emacs)
#+end_src


** text scaling
#+begin_src emacs-lisp
(global-set-key (kbd "c-+") 'text-scale-increase)
(global-set-key (kbd "c-=") 'text-scale-decrease)
#+end_src
